{"version":3,"sources":["App.js","index.js"],"names":["App","state","todos","inprogressTodoText","text","this","setState","id","todo","isCompleted","filteredTodos","filter","t","newTodo","createTodoFromText","todosCloned","push","classes","props","Container","className","root","Typography","variant","component","heading","gutterBottom","onSubmit","e","preventDefault","addCurrentTodo","TextField","input","value","onChange","updateInprogressTodo","target","List","Divider","inset","dividerFullWidth","dividerInset","color","display","map","i","ListItem","button","ListItemText","ListItemSecondaryAction","Checkbox","checked","onClick","toggleComplete","IconButton","deleteTodo","_","isEmpty","React","Component","withStyles","theme","maxHeight","maxWidth","textAlign","width","margin","spacing","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9b77f4c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  Container, List, ListItem, ListItemText, TextField, Typography, IconButton, Checkbox, ListItemSecondaryAction, Divider,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      // Our list of todos\n      todos: [],\n      // Inprogress todo stored in the textField\n      inprogressTodoText: ''\n    }\n  }\n\n  // Update the inprogress todo text\n  updateInprogressTodo(text) {\n    this.setState({ inprogressTodoText: text })\n  }\n\n  // Create and return a new todo object\n  createTodoFromText(text) {\n    const newTodo = {\n      id: 1,\n      todo: text,\n      isCompleted: false,\n    };\n    return newTodo\n  }\n\n  // Delete a todo from our list\n  deleteTodo(todo) {\n    const clonedTodos = [...this.state.todos];\n    const filteredTodos = clonedTodos.filter((t) => !(t.id === todo.id));\n    this.setState({ todos: filteredTodos });\n  }\n\n  // Add a todo to our list of todos\n  addCurrentTodo() {\n    const newTodo = this.createTodoFromText(this.state.inprogressTodoText)\n    const todosCloned = [...this.state.todos]\n    todosCloned.push(newTodo)\n    this.setState({ todos: todosCloned })\n  }\n\n  // Toggle the isCompleted flag on a given todo\n  toggleComplete(todo) {\n    todo.isCompleted = !todo.isCompleted;\n  }\n\n  render() {\n    // Ignore this â€“ has more to do with MaterialUI\n    const { classes } = this.props\n    // Destructure state for easy referencing throughout the render\n    const { todos, inprogressTodoText } = this.state\n    return (\n      <Container className={classes.root} >\n        <Typography variant=\"h2\" component=\"h1\" className={classes.heading} gutterBottom>\n          Todo List\n      </Typography>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            this.addCurrentTodo()\n          }}\n        >\n          <TextField\n            className={classes.input}\n            value={inprogressTodoText}\n            variant=\"outlined\"\n            onChange={(e) => this.updateInprogressTodo(e.target.value)}\n          />\n        </form>\n\n        {/* List of all todos and the completed ones */}\n        <List>\n          {/* Divider for styles */}\n          <Divider inset className={classes.dividerFullWidth} />\n          <li>\n            <Typography\n              className={classes.dividerInset}\n              color=\"textSecondary\"\n              display=\"block\"\n              variant=\"caption\"\n            >\n              Todos\n          </Typography>\n          </li>\n\n          {/* The Todos */}\n          {todos\n            .filter((todo) => !todo.isCompleted)\n            .map((todo, i) => (\n              <ListItem button key={i}>\n                <ListItemText>\n                  {todo.todo}\n                </ListItemText>\n                <ListItemSecondaryAction>\n                  <Checkbox checked={todo.isCompleted} value={todo.isCompleted} onClick={() => this.toggleComplete(todo)} />\n                  <IconButton onClick={() => this.deleteTodo(todo)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))\n          }\n\n          {/* If there are completed todos, render the Divider for styles */}\n          {!_.isEmpty(todos.filter((todo) => todo.isCompleted)) && (\n            <>\n              <Divider inset className={classes.dividerFullWidth} />\n              <li>\n                <Typography\n                  className={classes.dividerInset}\n                  color=\"textSecondary\"\n                  display=\"block\"\n                  variant=\"caption\"\n                >\n                  Completed Items\n                </Typography>\n              </li>\n            </>\n          )}\n\n          {/* The Completed Todos */}\n          {todos\n            .filter((todo) => todo.isCompleted)\n            .map((todo, i) => (\n              <ListItem button key={i}>\n                <ListItemText>\n                  {todo.todo}\n\n                </ListItemText>\n                <ListItemSecondaryAction>\n                  <IconButton onClick={() => deleteTodo(todo)}>\n                    <DeleteIcon />\n                  </IconButton>\n                  <Checkbox checked={todo.isCompleted} onChange={() => toggleComplete(todo)} />\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))\n          }\n        </List>\n      </Container>\n    );\n  }\n}\n\n\n// styles object for styling various components in the App\nconst styles = (theme) => ({\n  root: {\n    maxHeight: '100vh',\n    maxWidth: '1000px',\n  },\n  heading: {\n    textAlign: 'center',\n  },\n  input: {\n    width: '100%',\n  },\n  dividerFullWidth: {\n    margin: '5px 0 0 0',\n  },\n  dividerInset: {\n    margin: `5px 0 0 ${theme.spacing(2)}px`,\n  },\n});\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}